package org.radarcns.redcap.integration

import com.fasterxml.jackson.annotation.JsonProperty
import org.apache.commons.lang3.builder.EqualsBuilder
import org.apache.commons.lang3.builder.HashCodeBuilder
import org.radarcns.redcap.util.RedCapInput

/*
 * Copyright 2017 King's College London
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 * Defines input parameters for updating RADAR Enrolment Instrument: a REDCap instrument
 * automatically created by REDCap during the integration process.
 *
 * The instrument is composed by
 *  * `record_id`: subject unique identifier within the REDCap project
 *  * `subject_id`: RADAR subject identifier generated by the Management Portal
 *  * `human_readable_id`: human readable identifier useful to visualise data. It
 * should be the concatenation of
 *  * RADAR-CNS work package
 *  * project identifier
 *  * site
 *  * REDCap record id
 *
 */
class IntegrationData(
    /**
     * Returns the REDCap Record identifier.
     * @return [Integer] representing REDCap Record Identifier
     */
    /** REDCap Record identifier.  */
    override val record: Int,

    /**
     * Returns the REDCap Event name related to the update.
     * @return [String] representing REDCap Event name
     */
    /** REDCap Event name associated with the RECap form / instrument that will be updated.  */
    @JsonProperty("redcap_event_name")
    val redcapEventName: String,

    /**
     * Returns the field name that will be updated.
     * @return [String] representing field name
     */
    /** REDCap filed name that will be updated.  */
    @JsonProperty("field_name")
    val fieldName: String,

    /**
     * Returns the value that will be written in REDCap.
     * @return [String] representing the value that will be written
     */
    /** Value that will be written for the specified field name.  */
    val value: String
) : RedCapInput {


    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other !is IntegrationData) {
            return false
        }
        val that = other
        return EqualsBuilder()
            .append(record, that.record)
            .append(fieldName, that.fieldName)
            .append(value, that.value)
            .isEquals
    }

    override fun hashCode(): Int {
        return HashCodeBuilder(17, 37)
            .append(record)
            .append(fieldName)
            .append(value)
            .toHashCode()
    }

    companion object {
        /** Name of the REDCap form / instrument field where the RADAR Subject identifier has to be
         * stored.  */
        const val SUBJECT_ID_LABEL = "subject_id"
        /** Name of the REDCap form / instrument field where the Human Readable identifier has to be
         * stored.  */
        const val HUMAN_READABLE_ID_LABEL = "human_readable_id"
    }
}