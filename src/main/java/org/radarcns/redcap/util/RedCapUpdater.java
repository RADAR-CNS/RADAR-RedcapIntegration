package org.radarcns.redcap.util;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.Objects;
import java.util.Set;
import javax.inject.Inject;
import javax.servlet.ServletContext;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.radarcns.redcap.config.RedCapInfo;
import org.radarcns.redcap.config.RedCapManager;
import org.radarcns.redcap.listener.HttpClientListener;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * Copyright 2017 King's College London
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Skeleton for creating a REDCap update handler.
 */
public abstract class RedCapUpdater {

    private static final Logger LOGGER = LoggerFactory.getLogger(RedCapUpdater.class);

    private static final String API_ROOT = "/redcap/api/";

    private static final String DATA_LABEL = "data";
    private static final String TOKEN_LABEL = "token";

    private final RedCapTrigger trigger;
    protected final RedCapInfo redCapInfo;

    @Inject
    private OkHttpClient client;

    protected RedCapUpdater(RedCapTrigger trigger) {
        this.trigger = trigger;

        this.redCapInfo = RedCapManager.getInfo(trigger);
    }

    /**
     * Returns the REDCap API URL starting from the information contained in the
     *      {@link RedCapTrigger}.
     * @return {@link URL} to request REDCap API
     * @throws MalformedURLException in case the URL is malformed
     */
    public URL getApiUrl() throws MalformedURLException {
        return new URL(redCapInfo.getUrl().getProtocol(), redCapInfo.getUrl().getHost(),
                redCapInfo.getUrl().getPort(), API_ROOT);
    }

    /**
     * Function called by {@link #getRequest()} for specifying input data.
     */
    private String getValidInput() {
        Collection<RedCapInput> input = getInput();

        if (Objects.isNull(input) || input.isEmpty()) {
            throw new IllegalArgumentException("Invalid input. getInput has returned either a "
                    + "null or an empty list.");
        }

        try {
            return new ObjectMapper().writeValueAsString(input);
        } catch (JsonProcessingException exc) {
            throw new IllegalArgumentException(exc);
        }
    }

    /**
     * Leveraging on {@link #setParameter(FormBody.Builder)} and {@link #getValidInput()}, the
     *      function creates the {@link Request} that is then executed by {@link #updateForm()}.
     */
    private Request getRequest() throws IOException {
        RequestBody body = setParameter(new FormBody.Builder())
                .add(TOKEN_LABEL, redCapInfo.getToken())
                .add(DATA_LABEL, getValidInput())
                .build();

        return new Request.Builder()
                .url(getApiUrl())
                .post(body)
                .build();
    }

    /**
     * Triggers the actual update using the date generated by {@link #getInput()} and parameters
     *      provided by {@link #setParameter(FormBody.Builder)}. Note that in case the
     *      {@link FormBody.Builder} computed by {@link #setParameter(FormBody.Builder)} contains a
     *      {@code data}, this will be automatically override by this function.
     *
     * @return {@code true} in case of success, {@code false} otherwise
     * @throws IOException in case the request cannot be completed
     */
    public boolean updateForm() {
        try (Response response = client.newCall(getRequest()).execute()) {
            if (response.isSuccessful()) {
                LOGGER.debug("[{}] {}", response.code(), response.body().string());
                LOGGER.info("Successful update for record {} at {}", trigger.getRecord(),
                            trigger.getProjectUrl());
            } else {
                LOGGER.error("[{}] {}", response.code(), response.body().string());
            }
            return response.isSuccessful();
        }
        catch (IOException exc) {
            throw new IllegalStateException("Error updating RedCap form", exc);
        }
    }

    /**
     * Returns the REDCap record identifier involved in this update.
     * @return {@link Integer} representing REDCap record identifier
     */
    protected Integer getRecordId() {
        return trigger.getRecord();
    }

    /**
     * Generates the input list that is then send to REDCap by {@link #updateForm()}. The result of
     *      this function is validated by {@link #getValidInput()}.
     * @return a {@link Set} of {@link RedCapInput}
     */
    protected abstract Set<RedCapInput> getInput();

    /**
     * Generates the {@link FormBody.Builder} necessary for requesting REDCap API.
     *      {@link #updateForm()} will add the REDCap user {@code token} and {@code data}
     *      parameters.
     * @param builder {@link FormBody.Builder} that has to be populated
     * @return {@link FormBody.Builder} for updating a REDCap form
     */
    protected abstract FormBody.Builder setParameter(FormBody.Builder builder);
}
