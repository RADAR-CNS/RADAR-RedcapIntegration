plugins {
    id 'java'
    id 'idea'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
}

group 'org.radarcns'
version '0.1.0'

mainClassName = 'org.radarcns.redcap.webapp.GrizzlyServer'

targetCompatibility = '11'
sourceCompatibility = '11'

configurations {
    codacy
    provided
    compile.extendsFrom provided
}

repositories {
    mavenCentral()
    maven { url 'https://packages.confluent.io/maven/' }
    maven { url 'https://oss.jfrog.org/artifactory/libs-snapshot/' }
    maven { url 'https://dl.bintray.com/radar-cns/org.radarcns' }
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/kotlin'

    test.kotlin.srcDirs += 'src/test/kotlin'
    test.java.srcDirs += 'src/test/kotlin'

    integrationTest {
        java {
            compileClasspath += main.output + test.output + test.compileClasspath
            runtimeClasspath += main.output + test.output + test.compileClasspath + test.runtimeClasspath + main.runtimeClasspath
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


ext.apacheCommonsIoVersion = '2.5'
ext.apacheCommonsLangVersion = '3.6'
ext.jerseyVersion = '2.30.1'
ext.jerseymediaVersion = '2.30.1'
ext.junitVersion = '4.12'
ext.logbackVersion = '1.2.3'
ext.okhttp3Version = '3.8.1'
ext.radarCommonsVersion = '0.9.0'
ext.radarOauthClientVersion = '0.5.8'
ext.grizzlyVersion = '2.4.4'

dependencies {
    runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    runtimeOnly group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseymediaVersion

    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: jerseyVersion
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion

    compile group: 'org.glassfish.grizzly', name: 'grizzly-http-server', version: grizzlyVersion
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion

    compile group: 'org.radarcns', name: 'radar-commons-server', version: radarCommonsVersion
    compile group: 'org.radarcns', name: 'oauth-client-util', version: radarOauthClientVersion

    compile group: 'commons-io', name: 'commons-io', version: apacheCommonsIoVersion
    compile group: 'org.apache.commons', name: 'commons-lang3', version: apacheCommonsLangVersion

    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: okhttp3Version

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.11.+"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.+"
    compile "org.json:json:20170516"

    testCompile group: 'junit', name: 'junit', version: junitVersion
}

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//
checkstyle {
    // codacy version
    toolVersion '6.16'
    ignoreFailures false

    // ignore tests
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]
}

pmd {
    // pmd version
    toolVersion = '6.0.0'
    ignoreFailures = false

    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest]

    consoleOutput = true

    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

pmdTest {
    ruleSetFiles = files("config/pmd/test_ruleset.xml")
}


//---------------------------------------------------------------------------//
// Build system metadata                                                     //
//---------------------------------------------------------------------------//
idea {
    module {
        downloadSources = true
    }
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

wrapper {
    gradleVersion = '6.4'
}

tasks.withType(Tar) {
    compression = Compression.GZIP
    extension("tar")
}

//---------------------------------------------------------------------------//
// Testing                                                                   //
//---------------------------------------------------------------------------//

test {
    testLogging {
        // Show that tests are run in the command-line output
        events "skipped", "failed"
    }
}

task downloadApplicationDependencies {
    description "Pre-downloads application dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

task integrationTest(type: Test, dependsOn: ['copyConf']) { //['installMP', 'copyConf']) {
    description = "Run integration tests (located in src/integrationTest/...)."

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    // Don't run specific test classes as they will be run by the Test Suite
    exclude '**/*IntegratorTest*'
    exclude '**/*MpClientTest*'
    exclude '**/*EntryPointTest*'
    // This is not needed, but I like to see which tests have run
    testLogging {
        events "skipped", "failed", "passed", "STANDARD_OUT", "STANDARD_ERROR"
    }
}

//integrationTest.finalizedBy 'removeLock'

ext.sudoLinux = System.properties['os.name'].toLowerCase().contains('linux') ? ['sudo'] : []
ext.lock = 'src/integration-test/.RUNNING_INSTANCE_LOCK'

task installMP(type: Exec) {
    doFirst {
        def lockFile = new File(lock)
        if (lockFile.exists()) {
            throw new GradleException("A previous instance of the management portal is still running. Please stop it first and then try again.")
        } else {
            lockFile.createNewFile()
        }
    }

    workingDir 'src/integration-test/'
    standardInput = System.in
    commandLine sudoLinux + ['docker-compose', 'up', '-d', '--build', '--force-recreate']

    doLast {
        // wait until the managementportal is ready
        sleep(60_000)
    }
}

task removeLock(type: Exec) {

    workingDir 'src/integration-test/'
    commandLine sudoLinux + ['docker-compose', 'down']

    doLast {
        new File(lock).delete()
    }
}

task copyConf(type: Copy) {
    from "src/integration-test/resources/radar.yml"
    into "/usr/local/etc/radar-redcap-int/"

    filter { String line ->
        line.replace("management_portal_url: http://managementportal-app:8090/",
                "management_portal_url: http://localhost:8090/")
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
